import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from core.database import database
from game.engine import game_engine
from game.battle import battle_system
from content.story import get_story_scene, get_available_chapters
import config

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class FNFMMOBot:
    def __init__(self):
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        self.setup_handlers()
        self.user_battles = {}  # {user_id: battle_data}
        
    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("play", self.play))
        self.application.add_handler(CommandHandler("profile", self.profile))
        self.application.add_handler(CommandHandler("inventory", self.inventory))
        self.application.add_handler(CommandHandler("achievements", self.achievements))
        self.application.add_handler(CommandHandler("quests", self.quests))
        self.application.add_handler(CommandHandler("battle", self.battle))
        self.application.add_handler(CommandHandler("story", self.story))
        self.application.add_handler(CommandHandler("daily", self.daily))
        
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        player = database.get_player(user.id)
        
        if not player:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            player = database.create_player(user.id, user.username, user.first_name)
            await update.message.reply_text(
                f"üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Friday Night Funkin MMO!*\n\n"
                f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ä–∏—Ç–º-–±–∞—Ç—Ç–ª–æ–≤ –∏ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏–π.\n\n"
                f"*–¢–≤–æ—ë –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å!* üéµ\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                f"/play - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                f"/profile - –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
                f"/story - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—é–∂–µ—Ç\n"
                f"/battle - –†–∏—Ç–º-–±–∞—Ç—Ç–ª—ã\n"
                f"/quests - –ó–∞–¥–∞–Ω–∏—è\n"
                f"/achievements - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
                f"/inventory - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
                f"/daily - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {player['character_name']}! üé∏\n\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {player['level']} | –≠–Ω–µ—Ä–≥–∏—è: {player['energy']}/{player['max_energy']}\n"
                f"–î–µ–Ω—å–≥–∏: {player['money']} üí∞ | –û–ø—ã—Ç: {player['exp']} ‚≠ê\n\n"
                f"–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
                reply_markup=self.get_main_menu_keyboard()
            )
    
    async def play(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        player = database.get_player(user.id)
        
        if not player:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start")
            return
            
        await update.message.reply_text(
            f"üéØ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* - {player['character_name']}\n\n"
            f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    async def profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        progress = game_engine.get_player_progress(user.id)
        
        if not progress:
            await update.message.reply_text("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /start")
            return
            
        player = progress['player']
        stats = player['stats'] or {}
        
        text = (
            f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å {player['character_name']}*\n\n"
            f"üéØ –£—Ä–æ–≤–µ–Ω—å: {player['level']}\n"
            f"‚≠ê –û–ø—ã—Ç: {player['exp']}\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player['health']}/{player['max_health']}\n"
            f"‚ö° –≠–Ω–µ—Ä–≥–∏—è: {player['energy']}/{player['max_energy']}\n"
            f"üí∞ –î–µ–Ω—å–≥–∏: {player['money']}\n\n"
            f"üìä –ù–∞–≤—ã–∫–∏:\n"
            f"üéµ –†–∏—Ç–º: {player['rhythm']}\n"
            f"üí¨ –•–∞—Ä–∏–∑–º–∞: {player['charisma']}\n"
            f"üí™ –°–∏–ª–∞: {player['strength']}\n\n"
            f"üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚öîÔ∏è –ë–∏—Ç–≤: {stats.get('total_battles', 0)}\n"
            f"‚úÖ –ü–æ–±–µ–¥: {stats.get('battles_won', 0)}\n"
            f"‚≠ê –ò–¥–µ–∞–ª—å–Ω–æ: {stats.get('perfect_scores', 0)}\n"
            f"üî• –ú–∞–∫—Å –∫–æ–º–±–æ: {stats.get('max_combo', 0)}\n"
            f"üìú –ö–≤–µ—Å—Ç–æ–≤: {stats.get('quests_completed', 0)}\n\n"
            f"üéÆ –ò–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è: {progress['play_time']['total']} –º–∏–Ω—É—Ç"
        )
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def story(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        player = database.get_player(user.id)
        
        if not player:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start")
            return
            
        available_chapters = get_available_chapters(player['level'])
        
        if not available_chapters:
            await update.message.reply_text("–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤—ã–º –≥–ª–∞–≤–∞–º!")
            return
            
        keyboard = []
        for chapter_id in available_chapters:
            scene = get_story_scene(chapter_id, "intro")
            if scene:
                keyboard.append([InlineKeyboardButton(
                    f"üìñ {scene['text'][:30]}...", 
                    callback_data=f"story_{chapter_id}_intro"
                )])
        
        await update.message.reply_text(
            "üìö *–í—ã–±–µ—Ä–∏ –≥–ª–∞–≤—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def battle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        player = database.get_player(user.id)
        
        if not player:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start")
            return
            
        available_songs = []
        for song_id, song in battle_system.songs.items():
            if player['level'] >= song['difficulty'] * 2:
                available_songs.append(song_id)
        
        if not available_songs:
            await update.message.reply_text("–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∏—Ç–≤–∞–º!")
            return
            
        keyboard = []
        for song_id in available_songs:
            song = battle_system.songs[song_id]
            keyboard.append([InlineKeyboardButton(
                f"üéµ {song['name']} (‚ö°{song['energy_cost']})",
                callback_data=f"battle_start_{song_id}"
            )])
            
        await update.message.reply_text(
            "üé∏ *–í—ã–±–µ—Ä–∏ –ø–µ—Å–Ω—é –¥–ª—è –±–∏—Ç–≤—ã:*\n\n"
            "‚ö° - —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    async def achievements(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        progress = game_engine.get_player_progress(user.id)
        
        if not progress:
            await update.message.reply_text("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        achievements = progress['achievements']
        
        text = f"üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* - {progress['player']['character_name']}\n\n"
        text += f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {achievements['completed']}/{achievements['total']} ({achievements['completion_percentage']}%)\n\n"
        
        for achievement in achievements['list'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ" if achievement['completed'] else "üîÑ"
            text += f"{status} *{achievement['achievement_name']}*\n"
            text += f"   {achievement['progress']}/{achievement['target']} - {achievement['achievement_id']}\n\n"
            
        if len(achievements['list']) > 10:
            text += f"... –∏ –µ—â—ë {len(achievements['list']) - 10} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!"
        
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def quests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        player = database.get_player(user.id)
        
        if not player:
            await update.message.reply_text("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        active_quests = database.get_active_quests(player['id'])
        
        if not active_quests:
            text = "üìú *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n–ò—Å–ø–æ–ª—å–∑—É–π /daily –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!"
        else:
            text = "üìú *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*\n\n"
            for quest in active_quests:
                text += f"üéØ {quest['quest_type'].title()}\n"
                text += f"   {quest['progress']}/{quest['target']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n"
                
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def daily(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        player = database.get_player(user.id)
        
        if not player:
            await update.message.reply_text("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        generated = game_engine.generate_daily_quests(player['id'])
        
        await update.message.reply_text(
            f"üìÖ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!*\n\n"
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {generated} –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /quests –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π.",
            parse_mode='Markdown'
        )
    
    async def inventory(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        progress = game_engine.get_player_progress(user.id)
        
        if not progress:
            await update.message.reply_text("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        inventory = progress['inventory']
        
        text = f"üéí *–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å* - {progress['player']['character_name']}\n\n"
        text += f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {inventory['total_items']}\n\n"
        
        if inventory['items']:
            for item in inventory['items']:
                text += f"üì¶ {item['item_name']} x{item['quantity']}\n"
        else:
            text += "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!\n"
            
        await update.message.reply_text(text, parse_mode='Markdown')
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data.startswith("story_"):
            await self.handle_story_choice(user_id, data, query)
        elif data.startswith("battle_"):
            await self.handle_battle(user_id, data, query)
        elif data.startswith("arrow_"):
            await self.handle_battle_input(user_id, data, query)
            
    async def handle_story_choice(self, user_id, data, query):
        parts = data.split("_")
        chapter = parts[1]
        scene = parts[2]
        
        story_scene = get_story_scene(chapter, scene)
        if not story_scene:
            await query.edit_message_text("–°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
        player = database.get_player(user_id)
        energy_cost = story_scene.get('energy_cost', 0)
        
        if player['energy'] < energy_cost:
            await query.edit_message_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ù—É–∂–Ω–æ: {energy_cost}, –µ—Å—Ç—å: {player['energy']}\n"
                f"–≠–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º."
            )
            return
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–µ—Ä–≥–∏—é
        if energy_cost > 0:
            database.update_energy(player['id'], player['energy'] - energy_cost)
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ü–µ–Ω—É
        text = story_scene['text']
        
        keyboard = []
        if 'choices' in story_scene:
            for choice in story_scene['choices']:
                keyboard.append([InlineKeyboardButton(
                    choice['text'],
                    callback_data=f"story_{chapter}_{choice['action']}"
                )])
                
        if 'battle' in story_scene:
            keyboard.append([InlineKeyboardButton(
                "üé∏ –ù–∞—á–∞—Ç—å –±–∏—Ç–≤—É!",
                callback_data=f"battle_start_{story_scene['battle']}"
            )])
            
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–±–æ—Ä
        if len(parts) > 3 and parts[3] != "intro":
            rewards = game_engine.process_story_choice(player['id'], parts[3], story_scene)
            if rewards['exp'] > 0 or rewards['money'] > 0:
                reward_text = f"\n\nüéÅ –ù–∞–≥—Ä–∞–¥—ã: +{rewards['exp']} –æ–ø—ã—Ç–∞"
                if rewards['money'] > 0:
                    reward_text += f", +{rewards['money']} –¥–µ–Ω–µ–≥"
                await context.bot.send_message(
                    chat_id=user_id,
                    text=reward_text
                )
    
    async def handle_battle(self, user_id, data, query):
        parts = data.split("_")
        action = parts[1]
        song_id = parts[2] if len(parts) > 2 else None
        
        if action == "start":
            player = database.get_player(user_id)
            song = battle_system.songs.get(song_id)
            
            if not song:
                await query.edit_message_text("–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
            if player['energy'] < song['energy_cost']:
                await query.edit_message_text(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ù—É–∂–Ω–æ: {song['energy_cost']}, –µ—Å—Ç—å: {player['energy']}"
                )
                return
                
            # –ù–∞—á–∏–Ω–∞–µ–º –±–∏—Ç–≤—É
            battle_data = battle_system.start_battle(player['id'], song_id)
            self.user_battles[user_id] = battle_data
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–Ω–µ—Ä–≥–∏—é
            database.update_energy(player['id'], player['energy'] - song['energy_cost'])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–∏—Ç–≤—ã
            await query.edit_message_text(
                f"üé∏ *–ë–ò–¢–í–ê –ù–ê–ß–ê–õ–ê–°–¨!*\n\n"
                f"–ü–µ—Å–Ω—è: {song['name']}\n"
                f"–ù–æ—Ç: {song['notes']}\n"
                f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {'‚≠ê' * song['difficulty']}\n\n"
                f"*–ì–æ—Ç–æ–≤—å—Å—è –∫ –ø–µ—Ä–≤–æ–π –Ω–æ—Ç–µ!*",
                parse_mode='Markdown',
                reply_markup=self.get_battle_keyboard()
            )
            
    async def handle_battle_input(self, user_id, data, query):
        if user_id not in self.user_battles:
            await query.answer("–ë–∏—Ç–≤–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞!")
            return
            
        battle_data = self.user_battles[user_id]
        
        if battle_data['completed']:
            await query.answer("–ë–∏—Ç–≤–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥
        arrow = data.split("_")[1]
        timing_accuracy = "good"  # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ —Ç—É—Ç —Ä–∞—Å—á–µ—Ç —Ç–∞–π–º–∏–Ω–≥–∞
        
        battle_data = battle_system.process_note_input(
            battle_data, [arrow], timing_accuracy
        )
        
        self.user_battles[user_id] = battle_data
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        current_note = battle_data['current_note']
        total_notes = battle_data['total_notes']
        
        if battle_data['completed']:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –±–∏—Ç–≤—É
            summary = battle_system.get_battle_summary(battle_data)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
            database.record_battle(
                user_id,
                battle_data['song_id'],
                battle_data['score'],
                battle_data['max_combo'],
                battle_data['perfect_hits'],
                battle_data['good_hits'],
                battle_data['bad_hits'],
                battle_data['missed'],
                battle_data['battle_duration']
            )
            
            # –ù–∞–≥—Ä–∞–¥—ã
            rewards = game_engine.calculate_battle_rewards(
                user_id,
                battle_data['score'],
                battle_data['max_combo'], 
                battle_data['perfect_hits']
            )
            
            text = (
                f"üéâ *–ë–ò–¢–í–ê –ó–ê–í–ï–†–®–ï–ù–ê!*\n\n"
                f"–ü–µ—Å–Ω—è: {summary['song_name']}\n"
                f"–°—á–µ—Ç: {summary['score']}\n"
                f"–¢–æ—á–Ω–æ—Å—Ç—å: {summary['accuracy']}%\n"
                f"–ò–¥–µ–∞–ª—å–Ω–æ: {summary['perfect_hits']}\n"
                f"–ú–∞–∫—Å –∫–æ–º–±–æ: {summary['max_combo']}\n"
                f"–û—Ü–µ–Ω–∫–∞: {summary['grade']}\n\n"
                f"üéÅ –ù–∞–≥—Ä–∞–¥—ã:\n"
                f"+{rewards['exp']} –æ–ø—ã—Ç–∞\n"
                f"+{rewards['money']} –¥–µ–Ω–µ–≥\n"
            )
            
            if rewards.get('level_up'):
                text += f"üéØ –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {rewards['level_up']}\n"
                
            await query.edit_message_text(
                text,
                parse_mode='Markdown',
                reply_markup=self.get_main_menu_keyboard()
            )
            
            del self.user_battles[user_id]
            
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ—Ç—É
            next_note = battle_data['patterns'][current_note]
            note_text = " ".join(next_note['arrows'])
            
            await query.edit_message_text(
                f"üé∏ *–ë–ò–¢–í–ê* - {battle_data['song_name']}\n\n"
                f"–°—á–µ—Ç: {battle_data['score']}\n"
                f"–ö–æ–º–±–æ: {battle_data['combo']}\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {current_note}/{total_notes}\n\n"
                f"*–°–ª–µ–¥—É—é—â–∞—è –Ω–æ—Ç–∞:* {note_text}",
                parse_mode='Markdown',
                reply_markup=self.get_battle_keyboard()
            )
    
    def get_main_menu_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("üìñ –°—é–∂–µ—Ç", callback_data="menu_story"),
            InlineKeyboardButton("üé∏ –ë–∏—Ç–≤—ã", callback_data="menu_battle")],
            [InlineKeyboardButton("üìú –ó–∞–¥–∞–Ω–∏—è", callback_data="menu_quests"),
            InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="menu_achievements")],
            [InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="menu_inventory"),
            InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")],
            [InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", callback_data="menu_daily")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_battle_keyboard(self):
        keyboard = [
            [InlineKeyboardButton("‚Üê", callback_data="arrow_left"),
             InlineKeyboardButton("‚Üí", callback_data="arrow_right")],
            [InlineKeyboardButton("‚Üë", callback_data="arrow_up"),
             InlineKeyboardButton("‚Üì", callback_data="arrow_down")],
            [InlineKeyboardButton("üèÉ –°–±–µ–∂–∞—Ç—å", callback_data="battle_flee")]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def run(self):
        await self.application.run_polling()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = FNFMMOBot()
